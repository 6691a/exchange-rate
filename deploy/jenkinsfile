pipeline {
    agent any

    parameters {
        booleanParam(name: "BUILD", defaultValue: true, description: "DOCKER_IMAGE_BUILD")
        booleanParam(name: "TEST", defaultValue: true, description: "RUN_TEST")
        booleanParam(name: "PUSH", defaultValue: true, description: "DOCKER_IMAGE_PUSH")
        booleanParam(name : 'DEPLOY', defaultValue : true, description : 'DEPLOY_WORKLOAD')

        // SETTINGS
        string(name: "ENV_FILE_PATH", defaultValue: "exchange-rate/.env", description:"ENV_FILE_PATH")

        // CI
        string(name: "IMAGE_NAME", defaultValue: 'exchange-rate', description: "DOCKER_IMAGE_NAME")
        string(name: "TAG_NAME", defaultValue: '0.3.0', description: "DOCKER_TAG")
        string(name: "DOCKER_REPOSITORY", defaultValue: "hub.1ife.kr", description: "DOCKER_TAG")
        string(name: "DOCKER_FILE", defaultValue: "backend/dockerfile", description: "DOCKER_FILE_PATH")

        // CD
        string(name : 'TARGET_USER', defaultValue : 'juniya', description : 'TARGET_SVR_USER')
        string(name : 'TARGET_SERVER', defaultValue : '1ife.kr', description : 'TARGET_SERVER_IP')
        string(name : 'TARGET_SERVER_PORT', defaultValue : '4252', description : 'TARGET_SERVER_SSH_PORT')
    }

    environment {
        // CI
        DOCKER_REPOSITORY = "${params.DOCKER_REPOSITORY}"
        DOCKER_IMAGE_TAG =  "${DOCKER_REPOSITORY}/${params.IMAGE_NAME}:${params.TAG_NAME}"
        ENV_FILE = "${env.JENKINS_HOME}/env/${params.ENV_FILE_PATH}"

        // CD
        TARGET_SERVER_PATH = "/home/${params.TARGET_USER}/"
    }

//    stages {
//         stage('‚öôÔ∏è Set Up ‚öôÔ∏è') {
//             steps {
//                 script {
//                     // docker hub login
//                     withCredentials([
//                         usernamePassword(credentialsId: 'docker_hub',
//                         usernameVariable: 'USERNAME',
//                         passwordVariable: 'PASSWORD')
//                     ]) {
//                         sh 'docker login ${DOCKER_REPOSITORY} -u ${USERNAME} -p ${PASSWORD}'
//                     }
//                 }
//             }
//         }

        stage('üõ† Build Docker Image üõ†') {
            when {
                expression {
                    return params.BUILD
                }
            }

            steps {
                // env.WORKSPACEÎäî jenkinsÍ∞Ä ÏÑ§Ï†ïÌï¥ Ï§Ä ÌôòÍ≤Ω Í∞í
                // /var/jenkins_home/wrkspace/test
                dir("${env.WORKSPACE}") {
                    sh "docker build -f backend/dockerfile -t ${DOCKER_IMAGE_TAG} ./backend"
                }
            }
            post {
                success {
                    echo "üòÑ Docker Build Success üòÑ"
                }
            }
        }

        stage('üîé Runing Test üîé') {
            when {
                expression {
                    return params.TEST
                }
            }
            steps {
                sh ("docker run --env-file=${ENV_FILE}\
                --rm ${DOCKER_IMAGE_TAG} python manage.py test")
            }
            post {
                success {
                    echo "üòÑ Test Success üòÑ"
                }
            }
        }

//         stage('üìÆ Image Push üìÆ') {
//             when {
//                 expression {
//                     return params.PUSH
//                 }
//             }
//
//             steps {
//                 sh'''
//                     docker push ${DOCKER_IMAGE_TAG}
//                 '''
//             }
//
//             post {
//                 success {
//                     echo "üòÑ Image Push Success üòÑ"
//
//                 }
//             }
//         }

        // CD
        stage('üõ´ Deploy Workload üõ´') {
            when {
                expression {
                    return params.DEPLOY
                }
            }
            
            steps {
            sshagent (credentials: ['worker1_ssh']) {
                sh """#!/bin/bash
                    scp -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no \
                        deploy/docker-compose.yml \
                        ${params.TARGET_SVR_USER}@${params.TARGET_SVR}:${params.TARGET_SVR_PATH};
                    ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no \
                        ${params.TARGET_SVR_USER}@${params.TARGET_SVR} \
                        'aws ecr get-login-password --region ${REGION} | docker login --username AWS --password-stdin ${ECR_REPOSITORY}; \
                         export IMAGE=${ECR_DOCKER_IMAGE}; \
                         export TAG=${ECR_DOCKER_TAG}; \
                         docker-compose -f docker-compose.yml down;
                         docker-compose -f docker-compose.yml up -d';
                """
            }

            post {
                success {
                    echo "üòÑ Target Deploy Success üòÑ"
                }
            }
        }

//         stage('üßπ Clean Up üßπ') {
//             steps {
//                     // docker image prune -f
//                     // docker container prune -f
//                 sh """
//                     docker rmi ${DOCKER_IMAGE_TAG}"
//                 """
//             }
//         }
    }
}