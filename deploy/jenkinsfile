pipeline {
    agent any

    parameters {
        booleanParam(name: "BUILD", defaultValue: true, description: "DOCKER_IMAGE_BUILD")
        booleanParam(name: "TEST", defaultValue: true, description: "RUN_TEST")
        booleanParam(name: "PUSH", defaultValue: true, description: "DOCKER_IMAGE_PUSH")
        booleanParam(name : 'DEPLOY', defaultValue : true, description : 'DEPLOY_WORKLOAD')

        // SETTINGS
        string(name: "ENV_FILE_PATH", defaultValue: "exchange-rate/.env", description:"ENV_FILE_PATH")
        string(name: "DOCKER_REGISTRY", defaultValue: "hub.1ife.kr", description: "DOCKER_REGISTRY")

        // CI
        string(name: "DJANGO_IMAGE_NAME", defaultValue: 'exchange-rate', description: "DJANGO_IMAGE_NAME")
        string(name: "DJANGO_IMAGE_TAG", defaultValue: '0.3.0', description: "DJANGO_IMAGE_TAG")
        string(name: "NGINX_IMAGE_NAME", defaultValue: 'nginx', description: "NGINX_IMAGE_NAME")
        string(name: "NGINX_IMAGE_TAG", defaultValue: '0.1.0', description: "NGINX_IMAGE_TAG")


        // CD
        string(name : 'TARGET_USER', defaultValue : 'juniya', description : 'TARGET_SVR_USER')
        string(name : 'TARGET_SERVER', defaultValue : '1ife.kr', description : 'TARGET_SERVER_IP')
        string(name : 'TARGET_PORT', defaultValue : '4252', description : 'TARGET_SERVER_SSH_PORT')
    }

    environment {
        // CREDENTIALS
        DOCKER_HUB=credentials('docker_hub')

        // CI
        DOCKER_REGISTRY = "${params.DOCKER_REGISTRY}"

        DJANGO_DOCKER_IMAGE = "${DOCKER_REGISTRY}/${params.DJANGO_IMAGE_NAME}"
        DJANGO_DOCKER_TAG = "${params.DJANGO_IMAGE_TAG}"
        NGINX_DOCKER_IMAGE="${DOCKER_REGISTRY}/${params.NGINX_IMAGE_NAME}"
        NGINX_DOCKER_TAG = "${params.NGINX_IMAGE_TAG}"

        ENV_FILE = "${env.JENKINS_HOME}/env/${params.ENV_FILE_PATH}"

        // CD
        TARGET_SERVER_PATH = "/home/${params.TARGET_USER}"
    }
    
    stages {
        stage('⚙️ Set Up ⚙️') {
            steps {
                script {
                    // docker hub login
                    sh 'echo ${DOCKER_HUB_PSW} | docker login ${DOCKER_REGISTRY} -u ${DOCKER_HUB_USR} --password-stdin'
                }
            }
        }

        stage('🛠 Build Docker Image 🛠') {
            when {
                expression {
                    return params.BUILD
                }
            }

            steps {
                // env.WORKSPACE는 jenkins가 설정해 준 환경 값
                // /var/jenkins_home/wrkspace/test
                dir("${env.WORKSPACE}") {
                    // DJANGO BUILD
                    sh "docker build -f backend/dockerfile -t ${DJANGO_DOCKER_IMAGE}:${DJANGO_DOCKER_TAG} ./backend"

                    // NGINX BUILD
                    sh "docker build -f nginx/dockerfile -t ${NGINX_DOCKER_IMAGE}:${NGINX_DOCKER_TAG} ./nginx"
                }
            }
            post {
                success {
                    echo "😄 Docker Build Success 😄"
                }
            }
        }

        stage('🔎 Runing Test 🔎') {
            when {
                expression {
                    return params.TEST
                }
            }
            steps {
                sh (
                    "docker run --env-file=${ENV_FILE}\
                    --rm ${DJANGO_DOCKER_IMAGE}:${DJANGO_DOCKER_TAG} python manage.py test"
                )
            }
            post {
                success {
                    echo "😄 Test Success 😄"
                }
            }
        }

        stage('📮 Image Push 📮') {
            when {
                expression {
                    return params.PUSH
                }
            }

            steps {
                sh (
                    "docker push ${DJANGO_DOCKER_IMAGE}:${DJANGO_DOCKER_TAG}"
                )
                sh (
                    "docker push ${NGINX_DOCKER_IMAGE}:${NGINX_DOCKER_TAG}"
                )
            }

            post {
                success {
                    echo "😄 Image Push Success 😄"
                }
            }
        }

        // CD
        stage('🛫 Deploy Workload 🛫') {
            when {
                expression {
                    return params.DEPLOY
                }
            }
            
            steps {
                sshagent (credentials: ['jenkins_ssh']) {
                sh """ #!/bin/bash
                    scp -P ${params.TARGET_PORT} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no  \
                    docker-compose.yml ${ENV_FILE} \
                    ${params.TARGET_USER}@${params.TARGET_SERVER}:${TARGET_SERVER_PATH};
                """
                sh """
                        ssh -p ${params.TARGET_PORT} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no \
                        ${params.TARGET_USER}@${params.TARGET_SERVER} \
                        '
                        export DJANGO_IMAGE=${DJANGO_DOCKER_IMAGE}; \
                        export DJANGO_TAG=${DJANGO_DOCKER_TAG}; \
                        export NGINX_IMAGE=${NGINX_DOCKER_IMAGE}; \
                        export NGINX_TAG=${NGINX_DOCKER_TAG}; \
                        docker-compose -f docker-compose.yml down;\
                        docker-compose -f docker-compose.yml up -d --build;'
                """
                        // docker login error -> 수동 로그인으로 변경
                        // echo ${DOCKER_HUB_PSW} | docker login ${DOCKER_REGISTRY} -u ${DOCKER_HUB_USR} --password-stdin; \
                }
            }
            
            post {
                success {
                    echo "😄 Target Deploy Success 😄"
                }
            }
        }

        stage('🧹 Clean Up 🧹') {
            steps {
                    // docker image prune -f
                    // docker container prune -f
                sh """
                    docker rmi ${DJANGO_DOCKER_IMAGE}:${DJANGO_DOCKER_TAG}
                    docker rmi ${NGINX_DOCKER_IMAGE}:${NGINX_DOCKER_TAG}

                """
            }
        }
    }
}
