pipeline {
    agent any
    
    parameters {
        booleanParam(name: "BUILD", defaultValue: true, description: "DOCKER_IMAGE_BUILD")
        booleanParam(name: "TEST", defaultValue: true, description: "RUN_TEST")
        booleanParam(name: "PUSH", defaultValue: true, description: "DOCKER_IMAGE_PUSH")

        // SETTINGS
        string(name: "ENV_FILE_PATH", defaultValue: "exchange-rate/.env", description:"ENV_FILE_PATH")

        // CI
        string(name: "IMANGE_NAME", defaultValue: 'exchange-rate', description: "DOCKER_IMAGE_NAME")
        string(name: "TAG_NAME", defaultValue: '0.3.0', description: "DOCKER_TAG")
        string(name: "DOCKER_REPOSITORY", defaultValue: "hub.1ife.kr", description: "DOCKER_TAG")
        string(name: "DOCKER_FILE", defaultValue: "backend/dockerfile", description: "DOCKER_FILE_PATH")

        // CD

    }

    environment {
        DOCKER_IMAGE =  "${params.DOCKER_REPOSITORY}/${params.IMANGE_NAME}:${params.TAG_NAME}"
        ENV_FILE = "${env.ENV_PATH}/${params.ENV_FILE_PATH}"
    }

    stages {
        stage('ðŸ›  Build Docker Image ðŸ› ') {
            when {
                expression {
                    return params.BUILD
                }
            }
            steps {
                // env.WORKSPACEëŠ” jenkinsê°€ ì„¤ì •í•´ ì¤€ í™˜ê²½ ê°’
                // /var/jenkins_home/wrkspace/test
                dir("${env.WORKSPACE}") {
                    script {
                        docker = docker.build(${DOCKER_IMAGE}, "-f ${params.DOCKER_FILE} ./backend")
                    }
                }
            }
            post {
                success {
                    echo "ðŸ˜„ Docker Build success ðŸ˜„"
                }
            }
        }

        stage('ðŸ“– Run test code ðŸ“–') {
            when { 
                expression {
                    return params.TEST 
                } 
            }
            steps {
                sh ("docker run --env-file=${ENV_FILE}\
                --rm ${DOCKER_IMAGE} python manage.py test")
            }
            post {
                success {
                    echo "ðŸ˜„ Test success ðŸ˜„"
                }
            }
        }

        stage('ðŸ“¨') {
            steps {
                sh """
                // docker.withRegistry( '',docker_hub) { 
                //                                     dockerImage.push() 
                //     }
                //     docker push ${DOCKER_IMAGE}
                """
            }
        }
    }
}