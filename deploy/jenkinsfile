pipeline {
    agent any
    
    parameters {
        booleanParam(name: "BUILD", defaultValue: true, description: "DOCKER_IMAGE_BUILD")
        booleanParam(name: "TEST", defaultValue: true, description: "RUN_TEST")
        booleanParam(name: "PUSH", defaultValue: true, description: "DOCKER_IMAGE_PUSH")

        // SETTINGS
        string(name: "ENV_FILE_PATH", defaultValue: "exchange-rate/.env", description:"ENV_FILE_PATH")

        // CI
        string(name: "IMAGE_NAME", defaultValue: 'exchange-rate', description: "DOCKER_IMAGE_NAME")
        string(name: "TAG_NAME", defaultValue: '0.3.0', description: "DOCKER_TAG")
        string(name: "DOCKER_REPOSITORY", defaultValue: "hub.1ife.kr", description: "DOCKER_TAG")
        string(name: "DOCKER_FILE", defaultValue: "backend/dockerfile", description: "DOCKER_FILE_PATH")

        // CD

    }

    environment {
        DOCKER_REPOSITORY = "${params.DOCKER_REPOSITORY}"
        DOCKER_IMAGE_TAG =  "${DOCKER_REPOSITORY}/${params.IMAGE_NAME}:${params.TAG_NAME}"
        ENV_FILE = "${env.ENV_PATH}/${params.ENV_FILE_PATH}"
    }

    stages {
        stage('‚öôÔ∏è Set Up ‚öôÔ∏è') {
            steps {
                script {
                    // docker hub login
                    withCredentials([
                        usernamePassword( credentialsId: 'docker_hub', 
                        usernameVariable: 'USERNAME', 
                        passwordVariable: 'PASSWORD')
                    ]) {
                        sh 'docker login ${DOCKER_REPOSITORY} -u ${USERNAME} -p ${PASSWORD}'
                    }
                }
            }
        }
        stage('üõ† Build Docker Image üõ†') {
            when {
                expression {
                    return params.BUILD
                }
            }

            steps {
                // env.WORKSPACEÎäî jenkinsÍ∞Ä ÏÑ§Ï†ïÌï¥ Ï§Ä ÌôòÍ≤Ω Í∞í
                // /var/jenkins_home/wrkspace/test
                dir("${env.WORKSPACE}") {
                    sh "docker build -f backend/dockerfile -t ${DOCKER_IMAGE_TAG} ./backend"
                }
            }
            post {
                success {
                    echo "üòÑ Docker Build success üòÑ"
                }
            }
        }

        stage('üîé Runing Test üîé') {
            when { 
                expression {
                    return params.TEST 
                } 
            }
            steps {
                sh ("docker run --env-file=${ENV_FILE}\
                --rm ${DOCKER_IMAGE_TAG} python manage.py test")
            }
            post {
                success {
                    echo "üòÑ Test success üòÑ"
                }
            }
        }

        stage('üìÆ Image Push üìÆ') {
            when {
                expression {
                    return params.PUSH
                }
            }

            steps {
                sh'''
                    docker push ${DOCKER_IMAGE_TAG}
                '''
            }
        }

        // stage('üßπ Clean Up üßπ') {
        //     steps {
        //         sh """
        //             docker rmi ${DOCKER_IMAGE_TAG}"
        //         """
        //     }
        // }
    }
}